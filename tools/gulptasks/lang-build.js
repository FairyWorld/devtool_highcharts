/*
 * Copyright (C) Highsoft AS
 */

const gulp = require('gulp');
const log = require('./lib/log');

/**
 * Crete language ts files from JSON
 *
 * @return {Promise<void>}
 *         Promise to keep
 */
async function langBuild() {
    const { resolve } = require('node:path');
    const { readdir, writeFile } = require('node:fs/promises');

    const LANG_DIR = 'i18n';
    const TS_FOLDER = 'ts/masters/i18n';

    const langFiles = (
        await readdir(LANG_DIR, {
            withFileTypes: true
        })
    )
        .filter(dirent => dirent.isFile() && /lang-.*.json/u.test(dirent.name))
        .map(dirent => dirent.name);

    // eslint-disable-next-line
    const template = (jsonContent, lang) => `/**
* @license Highcharts JS v@product.version@ (@product.date@)
* @module highcharts/i18n/${lang}
* @requires highcharts
*
* ${lang} language pack
*
* (c) 2009-2024 Torstein Honsi
*
* License: www.highcharts.com/license
*
* **Do not edit this file!** This file is generated using the 'gulp i18n-bundle' task.
*/

import D from '../../Core/Defaults.js';
const { setOptions } = D;

const languageOptions = ${JSON.stringify(jsonContent, null, 4)};

setOptions({
    lang: languageOptions
});`;


    for (const langFile of langFiles) {
        const jsonContent = require(resolve(LANG_DIR, langFile));

        const tsContent = template(jsonContent, jsonContent.language);
        const outputFile = resolve(
            TS_FOLDER,
            `${langFile.replace('.json', '')}.src.ts`
        );


        await writeFile(
            outputFile,
            tsContent
        ).catch(e => {
            log.error(`Error writing ${outputFile}: ${e.message}`);

            throw e;
        });

        log.success(`Created ${outputFile}`);
    }

}

gulp.task('lang-build', langBuild);

gulp.task('lang-build:watch', () => gulp.watch(['i18n/**/*.json'], cb => {
    log.message('Language files changed, rebuilding...');
    langBuild();
    cb();
}));
